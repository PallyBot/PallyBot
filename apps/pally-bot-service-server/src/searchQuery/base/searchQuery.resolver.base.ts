/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SearchQuery } from "./SearchQuery";
import { SearchQueryCountArgs } from "./SearchQueryCountArgs";
import { SearchQueryFindManyArgs } from "./SearchQueryFindManyArgs";
import { SearchQueryFindUniqueArgs } from "./SearchQueryFindUniqueArgs";
import { CreateSearchQueryArgs } from "./CreateSearchQueryArgs";
import { UpdateSearchQueryArgs } from "./UpdateSearchQueryArgs";
import { DeleteSearchQueryArgs } from "./DeleteSearchQueryArgs";
import { SearchResultFindManyArgs } from "../../searchResult/base/SearchResultFindManyArgs";
import { SearchResult } from "../../searchResult/base/SearchResult";
import { User } from "../../user/base/User";
import { SearchQueryService } from "../searchQuery.service";
@graphql.Resolver(() => SearchQuery)
export class SearchQueryResolverBase {
  constructor(protected readonly service: SearchQueryService) {}

  async _searchQueriesMeta(
    @graphql.Args() args: SearchQueryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SearchQuery])
  async searchQueries(
    @graphql.Args() args: SearchQueryFindManyArgs
  ): Promise<SearchQuery[]> {
    return this.service.searchQueries(args);
  }

  @graphql.Query(() => SearchQuery, { nullable: true })
  async searchQuery(
    @graphql.Args() args: SearchQueryFindUniqueArgs
  ): Promise<SearchQuery | null> {
    const result = await this.service.searchQuery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SearchQuery)
  async createSearchQuery(
    @graphql.Args() args: CreateSearchQueryArgs
  ): Promise<SearchQuery> {
    return await this.service.createSearchQuery({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SearchQuery)
  async updateSearchQuery(
    @graphql.Args() args: UpdateSearchQueryArgs
  ): Promise<SearchQuery | null> {
    try {
      return await this.service.updateSearchQuery({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchQuery)
  async deleteSearchQuery(
    @graphql.Args() args: DeleteSearchQueryArgs
  ): Promise<SearchQuery | null> {
    try {
      return await this.service.deleteSearchQuery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SearchResult], { name: "searchResults" })
  async findSearchResults(
    @graphql.Parent() parent: SearchQuery,
    @graphql.Args() args: SearchResultFindManyArgs
  ): Promise<SearchResult[]> {
    const results = await this.service.findSearchResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: SearchQuery): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
