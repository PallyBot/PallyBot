/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SearchQuery as PrismaSearchQuery,
  SearchResult as PrismaSearchResult,
  User as PrismaUser,
} from "@prisma/client";

export class SearchQueryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SearchQueryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.searchQuery.count(args);
  }

  async searchQueries(
    args: Prisma.SearchQueryFindManyArgs
  ): Promise<PrismaSearchQuery[]> {
    return this.prisma.searchQuery.findMany(args);
  }
  async searchQuery(
    args: Prisma.SearchQueryFindUniqueArgs
  ): Promise<PrismaSearchQuery | null> {
    return this.prisma.searchQuery.findUnique(args);
  }
  async createSearchQuery(
    args: Prisma.SearchQueryCreateArgs
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.create(args);
  }
  async updateSearchQuery(
    args: Prisma.SearchQueryUpdateArgs
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.update(args);
  }
  async deleteSearchQuery(
    args: Prisma.SearchQueryDeleteArgs
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.delete(args);
  }

  async findSearchResults(
    parentId: string,
    args: Prisma.SearchResultFindManyArgs
  ): Promise<PrismaSearchResult[]> {
    return this.prisma.searchQuery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .searchResults(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.searchQuery
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
