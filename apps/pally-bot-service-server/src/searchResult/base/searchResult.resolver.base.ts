/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SearchResult } from "./SearchResult";
import { SearchResultCountArgs } from "./SearchResultCountArgs";
import { SearchResultFindManyArgs } from "./SearchResultFindManyArgs";
import { SearchResultFindUniqueArgs } from "./SearchResultFindUniqueArgs";
import { CreateSearchResultArgs } from "./CreateSearchResultArgs";
import { UpdateSearchResultArgs } from "./UpdateSearchResultArgs";
import { DeleteSearchResultArgs } from "./DeleteSearchResultArgs";
import { SearchQuery } from "../../searchQuery/base/SearchQuery";
import { SearchResultService } from "../searchResult.service";
@graphql.Resolver(() => SearchResult)
export class SearchResultResolverBase {
  constructor(protected readonly service: SearchResultService) {}

  async _searchResultsMeta(
    @graphql.Args() args: SearchResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SearchResult])
  async searchResults(
    @graphql.Args() args: SearchResultFindManyArgs
  ): Promise<SearchResult[]> {
    return this.service.searchResults(args);
  }

  @graphql.Query(() => SearchResult, { nullable: true })
  async searchResult(
    @graphql.Args() args: SearchResultFindUniqueArgs
  ): Promise<SearchResult | null> {
    const result = await this.service.searchResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SearchResult)
  async createSearchResult(
    @graphql.Args() args: CreateSearchResultArgs
  ): Promise<SearchResult> {
    return await this.service.createSearchResult({
      ...args,
      data: {
        ...args.data,

        searchQuery: args.data.searchQuery
          ? {
              connect: args.data.searchQuery,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SearchResult)
  async updateSearchResult(
    @graphql.Args() args: UpdateSearchResultArgs
  ): Promise<SearchResult | null> {
    try {
      return await this.service.updateSearchResult({
        ...args,
        data: {
          ...args.data,

          searchQuery: args.data.searchQuery
            ? {
                connect: args.data.searchQuery,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchResult)
  async deleteSearchResult(
    @graphql.Args() args: DeleteSearchResultArgs
  ): Promise<SearchResult | null> {
    try {
      return await this.service.deleteSearchResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => SearchQuery, {
    nullable: true,
    name: "searchQuery",
  })
  async getSearchQuery(
    @graphql.Parent() parent: SearchResult
  ): Promise<SearchQuery | null> {
    const result = await this.service.getSearchQuery(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
