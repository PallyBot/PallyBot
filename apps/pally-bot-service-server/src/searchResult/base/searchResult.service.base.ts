/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SearchResult as PrismaSearchResult,
  SearchQuery as PrismaSearchQuery,
} from "@prisma/client";

export class SearchResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SearchResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.searchResult.count(args);
  }

  async searchResults(
    args: Prisma.SearchResultFindManyArgs
  ): Promise<PrismaSearchResult[]> {
    return this.prisma.searchResult.findMany(args);
  }
  async searchResult(
    args: Prisma.SearchResultFindUniqueArgs
  ): Promise<PrismaSearchResult | null> {
    return this.prisma.searchResult.findUnique(args);
  }
  async createSearchResult(
    args: Prisma.SearchResultCreateArgs
  ): Promise<PrismaSearchResult> {
    return this.prisma.searchResult.create(args);
  }
  async updateSearchResult(
    args: Prisma.SearchResultUpdateArgs
  ): Promise<PrismaSearchResult> {
    return this.prisma.searchResult.update(args);
  }
  async deleteSearchResult(
    args: Prisma.SearchResultDeleteArgs
  ): Promise<PrismaSearchResult> {
    return this.prisma.searchResult.delete(args);
  }

  async getSearchQuery(parentId: string): Promise<PrismaSearchQuery | null> {
    return this.prisma.searchResult
      .findUnique({
        where: { id: parentId },
      })
      .searchQuery();
  }
}
